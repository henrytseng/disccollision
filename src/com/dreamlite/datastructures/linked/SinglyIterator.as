package com.dreamlite.datastructures.linked {	import com.dreamlite.datastructures.IIterator;	/**	 * An iterator for <code>SinglyList</code>.  	 * @author henry	 */	public class SinglyIterator implements IIterator {		protected var _list : SinglyLinkedList;		protected var _next : SinglyNode;				/**		 * Constructor		 */		public function SinglyIterator($list:SinglyLinkedList) {			_list=$list;			_next = _list._head;		}				/**		 * Returns <code>true</code> if the iteration has more elements.		 * @return <code>true</code> if next node is available		 */		public function hasNext():Boolean {			return _next!=null;		}				/**		 * Move iterator to next item and retrieve data item.  Next item begins at list head at start.  		 * @return Returns the next data in the collection.  		 */		public function next():* {			var n:SinglyNode = _next;			_next=_next._next;			return n._data;		}				/**		 * Move iterator to next item		 */		public function forward():void {					}		/**		 * Insert data after current node		 * @param $data data to insert		 */		public function insertAfter($data:*):void {			_next._insertAfter(new SinglyNode($data));		}				/**		 * Remove data after current node		 */		public function removeAfter():void {			_next._removeAfter();		}				/**		 * Set data at current node.  		 * @param $data data to set		 */		public function set data($data:*):void {			_next._data=$data;		}				/**		 * Get data at current node.  		 * @return data on current node		 */		public function get data():* {			return _next._data;		}				/**		 * Removes the current node 		 */		public function remove():void {			var last:SinglyNode=null;			for(var n:SinglyNode=_list._head; n!=null; n=n._next) {				if(n==_next) {					if(last!=null) last._next = n._next;					if(_list._head==n) _list._head=n._next;					if(_list._tail==n) _list._tail=last;					return;				}				last=n;			}		}				public function toString():String { return '[SinglyIterator]'; }				/**		 * Destroy		 */		public function destroy():void {			_list=null;			_next=null;		}	}}