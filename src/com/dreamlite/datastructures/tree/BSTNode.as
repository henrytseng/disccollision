package com.dreamlite.datastructures.tree {	/**	 * @author henry	 */	public class BSTNode {		internal var _key : BSTKey;		internal var _data : *;		public var left : BSTNode;		public var right : BSTNode;		public var parent : BSTNode;				public function BSTNode($key:BSTKey, $data:*) {			_key = $key;			_data = $data;		}				public function get key():BSTKey { return _key; }				public function get data():* { return _data; }				/**		 * Calculates levels of depth from this node.		 */		public function getDepth():int {			var rightDepth:int = 0;			var leftDepth:int = 0;			if(right) rightDepth = right.getDepth();			if(left) leftDepth = left.getDepth();			return (right>left) ? rightDepth+1 : leftDepth+1;		}				/**		 * Calculates size of tree from this node		 */		public function getSize():int {			var rightDepth:int = 0;			var leftDepth:int = 0;			if(right) rightDepth = right.getDepth();			if(left) leftDepth = left.getDepth();			return rightDepth+leftDepth+1;		}				/**		 * Sets data in node on left or creates new node		 * @param $keyValue		 * @param $data		 * @return		 */		public function insertLeft($key:BSTKey, $data:*):BSTNode {			if(left) {				left._data = $data;							} else {				left = new BSTNode($key, $data);				left.parent = this;			}			return left;		}				/**		 * Sets data in node on right or creates new node		 * @param $keyValue		 * @param $data		 * @return		 */		public function insertRight($key:BSTKey, $data:*):BSTNode {			if(right) {				right._data = $data;							} else {				right = new BSTNode($key, $data);				right.parent = this;			}			return right;		}				/**		 * Checks if current node is connected to parent from left branch		 */		public function isLeft():Boolean {			if(!parent) return false; 			return parent.left == this;		}				/**		 * Checks if current node is connected to parent from right branch		 */		public function isRight():Boolean {			if(!parent) return false; 			return parent.right == this;		}				/**		 * Destroys entire tree below this node		 */		public function destroy():void {			_key.destroy();			_key=null;			_data=null;			if(left) left.destroy();			if(right) right.destroy();			left=null;			right=null;			parent=null;		}				public function toString():String { return '[BSTNode '+_key.value+':'+_data+']'; }	}}